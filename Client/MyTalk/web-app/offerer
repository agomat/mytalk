<!DOCTYPE html>
<html>
  <head>
    <title>MyTalk</title>
    <link rel="stylesheet" href="css/common.css" type="text/css" />
  </head>
  <body>
<script type="text/javascript" src="http://bit.ly/RTCPeerConnection-v1-5"></script>
    <script src="https://webrtc-experiment.appspot.com/dependencies/websocket.js"></script>
    <script type="text/javascript">
        "use strict"
        
        var socket = new WebSocket("wss://pubsub.pubnub.com/demo/demo/webrtc-app");
        socket.onmessage = onconnect;
        socket.onopen = function(event)
        {
            oncallback(event.data);
        };

        function onconnect() {
            transmitRequest();
        }
        
        var userID = 'offerer';             /* unique ID to identify this user */
        var foundParticipant = false;

        function transmitRequest()
        {
            socket.send({
                userID  : userID,
                type    : 'request to join'
            });

            // Transmit "join request" until participant found
            !foundParticipant && setTimeout(transmitRequest, 1000);
        }

        function oncallback(response) 
        {
            // Don't get his own messages
            if(response.userID == userID) return;

            // if participant found
            if(response.participant)
            {
                foundParticipant = true;

                // create offer and send him offer sdp
                createOffer();
            }

            // answer sdp sent to you: complete handshake
            if(response.firstPart || response.secondPart)
            {
                processAnswerSDP(response);
            }
        }

        var peer;

        function createOffer()
        {
            peer = RTCPeerConnection({

                /* function(offer_sdp) {}, */
                onOfferSDP: sendOfferSDP,

                onICE: function(candidate) {
                    socket && socket.send({
                        userID: userID,
                        candidate: {
                            sdpMLineIndex: candidate.sdpMLineIndex,
                            candidate: JSON.stringify(candidate.candidate)
                        }
                    });
                },
                onRemoteStream: function(stream) {
                    if(stream) video.src = webkitURL.createObjectURL(stream);
                },
                attachStream: clientStream
            });
        }

        // send offer sdp 
        function sendOfferSDP(sdp)
        {
            var sdp = JSON.stringify(sdp);

            /* because sdp size is larger than what pubnub supports for single request...
            /* that's why it is splitted in two parts */
            var firstPart = sdp.substr(0, 700),
                secondPart = sdp.substr(701, sdp.length - 1);

            /* transmitting first sdp part */
            socket.send({
                userID: userID,
                firstPart: firstPart
            });

            /* transmitting second sdp part */
            socket.send({
                userID: userID,
                secondPart: secondPart
            });
        }

        var answerSDP = {};

        // got answer sdp, process it 
        function processAnswerSDP(response)
        {
            if (response.firstPart) {
                answerSDP.firstPart = response.firstPart;
                if (answerSDP.secondPart) {
                    var fullSDP = JSON.parse(answerSDP.firstPart + answerSDP.secondPart);
                    peer.addAnswerSDP(fullSDP);
                }
            }
            
            if (response.secondPart) {
                answerSDP.secondPart = response.secondPart;
                if (answerSDP.firstPart) {
                    var fullSDP = JSON.parse(answerSDP.firstPart + answerSDP.secondPart);
                    peer.addAnswerSDP(fullSDP);
                }
            }
        }
 
    </script>
  
  
  </body>
</html>